#!/bin/bash

# AI Dev Team - Automated Project Import Script
# This ensures consistent project onboarding and prevents branch confusion

set -e  # Exit on error

echo "üöÄ AI Dev Team - Project Import Tool"
echo "===================================="

# Check if URL provided
if [ -z "$1" ]; then
    echo "‚ùå Error: Please provide a GitHub repository URL"
    echo "Usage: ./import_project.sh <github-url>"
    exit 1
fi

REPO_URL=$1
PROJECT_DIR="../../project"

# Clean any existing project
if [ -d "$PROJECT_DIR" ]; then
    echo "‚ö†Ô∏è  Found existing project. Removing..."
    rm -rf "$PROJECT_DIR"
fi

# Clone the repository
echo "üì• Cloning repository..."
git clone "$REPO_URL" "$PROJECT_DIR" || {
    echo "‚ùå Failed to clone repository"
    exit 1
}

cd "$PROJECT_DIR"

echo ""
echo "üîç Analyzing branches..."
echo "========================"

# Get all branches
echo "Available branches:"
git branch -a | grep -E "remotes/origin" | sed 's/remotes\/origin\///' | grep -v "HEAD" | while read branch; do
    # Get last commit info for each branch
    last_commit=$(git log -1 --pretty=format:"%cr - %s" origin/$branch 2>/dev/null || echo "No commits")
    echo "  - $branch: $last_commit"
done

echo ""
echo "üìä Recent branch activity:"
echo "========================="
git for-each-ref --sort=-committerdate refs/remotes/origin --format='%(refname:short) - %(committerdate:relative) - %(subject)' | sed 's/origin\///' | head -10

echo ""
echo "üéØ Branch Selection"
echo "=================="
echo "Which branch should we work on? (or 'main' if not specified)"
read -p "Branch name: " SELECTED_BRANCH

if [ -z "$SELECTED_BRANCH" ]; then
    SELECTED_BRANCH="main"
fi

# Checkout the selected branch
echo "Switching to branch: $SELECTED_BRANCH"
git checkout "$SELECTED_BRANCH" 2>/dev/null || git checkout -b "$SELECTED_BRANCH" "origin/$SELECTED_BRANCH" || {
    echo "‚ùå Failed to checkout branch: $SELECTED_BRANCH"
    exit 1
}

# Create project context file
echo ""
echo "üìù Creating project context..."
cat > PROJECT_CONTEXT.md << EOF
# Project Context

## Repository Information
- **URL**: $REPO_URL
- **Working Branch**: $SELECTED_BRANCH
- **Import Date**: $(date)

## Branch Analysis
$(git branch -a | grep -E "remotes/origin" | sed 's/remotes\/origin\///' | grep -v "HEAD")

## Recent Commits on $SELECTED_BRANCH
$(git log -10 --oneline)

## Project Structure
$(find . -type d -name ".*" -prune -o -type d -print | head -20)

## Key Files
$(find . -type f \( -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \) -not -path "./node_modules/*" -not -path "./.git/*" | head -20)

---
*This file was auto-generated by import_project.sh*
EOF

echo "‚úÖ Project context saved to PROJECT_CONTEXT.md"

# Final questions
echo ""
echo "üìã Quick Context Questions"
echo "========================="
echo "1. What were you last working on in this project?"
read -p "Your answer: " LAST_WORK

echo ""
echo "2. Are there any special folders or patterns to be aware of?"
read -p "Your answer: " SPECIAL_FOLDERS

echo ""
echo "3. What's the current state - working, broken, or partial?"
read -p "Your answer: " CURRENT_STATE

echo ""
echo "4. What would you like to accomplish in this session?"
read -p "Your answer: " SESSION_GOALS

# Append user context to PROJECT_CONTEXT.md
cat >> PROJECT_CONTEXT.md << EOF

## User Context ($(date))

### Last Work
$LAST_WORK

### Special Folders/Patterns
$SPECIAL_FOLDERS

### Current State
$CURRENT_STATE

### Session Goals
$SESSION_GOALS
EOF

echo ""
echo "‚úÖ Import complete! Project ready at: $PROJECT_DIR"
echo "‚úÖ Context saved to: $PROJECT_DIR/PROJECT_CONTEXT.md"
echo ""
echo "üìå Summary:"
echo "  - Repository: $REPO_URL"
echo "  - Branch: $SELECTED_BRANCH"
echo "  - Goal: $SESSION_GOALS"
echo ""
echo "You can now start the AI Dev Team system!"